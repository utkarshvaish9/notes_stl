most frequent used feature of vector is to report its size.

	int count = v.size();
to check for vector's emptiness:
	
	v.empty();
To erase the vector
	v.clear();

If vector needs to be initialized with something else,

	vector<string> names(20,"Unknown");

Using 2-D array:
	vector <vector<int>> cost;
	cost.resize(column,vector<int>(row));
	cin>>cost[i][j];
	manipulate them as normal 2-D array




Mostly vectors should not be directly passed to any function as it requires a lot of time and memory to create new vector.To avoid that,pass it like,

	void some_function(const vector<int>& v)
	if content of vector needs to be changed, we just need to omit const.


double arr[100];
std::copy(v.begin(), v.end(), arr);//convert vector to array

int data[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31 }; 
 vector<int> primes(data, data+(sizeof(data) / sizeof(data[0]))); //convert array to vector

 int i = (find(v.begin(), v.end(), 49) - v.begin()); //to find any element

 int data[5] = { 1, 5, 2, 4, 3 }; 
 vector<int> X(data, data+5); 
 int v1 = *max_element(X.begin(), X.end()); // Returns value of max element in vector 
 int i1 = min_element(X.begin(), X.end()) – X.begin; // Returns index of min element in vector 

 int v2 = *max_element(data, data+5); // Returns value of max element in array 
 int i3 = min_element(data, data+5) – data; // Returns index of min element in array 

Each container also has the rbegin()/rend() functions, which return reverse iterators. Reverse iterators are used to traverse the container in backward order

 PAIR
 	 
 	 pair<string, pair<int,int> > P; 
 	 string s = P.first; // extract string 
 	 int x = P.second.first; // extract first int 
 	 int y = P.second.second; // extract second int 

 	 pair<char, int>pair1 = make_pair('A', 1);

 	 // C++ program to demonstrate vector of pairs
#include<bits/stdc++.h>
using namespace std;
 
int main()
{
    //declaring vector of pairs
    vector< pair <int,int> > vect;
 
    // initialising 1st and 2nd element of
    // pairs with array values
    int arr[] = {10, 20, 5, 40 };
    int arr1[] = {30, 60, 20, 50};
    int n = sizeof(arr)/sizeof(arr[0]);
 
    // Entering values in vector of pairs
    for (int i=0; i<n; i++)
        vect.push_back( make_pair(arr[i],arr1[i]) );
 
    // Printing the vector
    for (int i=0; i<n; i++)
    {
        // "first" and "second" are used to access
        // 1st and 2nd element of pair respectively
        cout << vect[i].first << " "
             << vect[i].second << endl;
    }
 
    return 0;
}



 Sort function can be used for array as well as vectors.
 
 //Sorting on the basis of second parameter of Pair.

 bool sortBySec(const pair<int,int> &a,const pair<int,int> &b)
	{
		return a.second<b.second;
	}
//in main()

sort(v.begin(),v.end(),sortBySec);

Since set is not a linear container, it’s impossible to take the element in set by index. Therefore, 
the only way to traverse the elements of set is to use iterators.

for(set<int>::const_iterator it = S.begin(); it != S.end(); it++) { 
      r += *it; 

 set<int> s; 
 // ... 
 if(s.find(42) != s.end()) { 
      // 42 presents in set 
 } 
 else { 
      // 42 not presents in set 
 } 

 vector<int> v; 
 // … 
 set<int> s(v.begin(),v.end()); 
 vector<int> v2(s.begin(),s.end()); 

 Here ‘v2′ will contain the same elements as ‘v’ but sorted in ascending order and with duplicates removed.
 
 for each loop in c++
 	suppose arr is an array... to iterate over all its element,
	for(int i: arr)
	now i can be used as element of arr...

accumulate method
	adds element of array
		accumulate(vec.begin(),vec.end(),0);//0 denotes the starting index

count method

	counts occurence of element in vector.
		count(vec.begin(),vec.end(),20)//20 being number to be searched.

	vec.erase(unique(arr.begin(),arr.end()),arr.end()) // erases the duplicate occurrences in sorted vector in a single line.

copy_n method
	copy to some other array from some other array.
	copy_n(arr, numberOfElementToBeCopied,arr1)

